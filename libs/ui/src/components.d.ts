/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Color,
} from './interface';

export namespace Components {
  interface FitUiAvatar {
    /**
    * The source of the image to render.
    */
    'src': string;
  }
  interface FitUiCalendarCard {
    /**
    * The color of the indicator on the card
    */
    'color': Color;
    /**
    * The display format for the end time.
    */
    'endTime': string;
    /**
    * The heading of the calendar card
    */
    'heading': string;
    /**
    * The display format for the start time.
    */
    'startTime': string;
    /**
    * The sub heading of the calendar card
    */
    'subheading': string;
  }
  interface FitUiCalendarCardList {
    'items': any[];
  }
  interface FitUiDashboardActivityChart {}
  interface FitUiDashboardDrawer {}
  interface FitUiDashboardPage {}
  interface FitUiDateBtn {
    'value': Date;
  }
  interface FitUiGoalCta {}
  interface FitUiIcon {
    /**
    * Specifies the label to use for accessibility. Defaults to the icon name.
    */
    'ariaLabel'?: string;
    'color': Color;
    /**
    * If enabled, ion-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
    */
    'lazy': boolean;
    /**
    * Specifies which icon to use from the built-in set of icons.
    */
    'name'?: string;
    /**
    * The size of the icon. Available options are: `"small"` and `"large"`.
    */
    'size'?: string;
  }
  interface FitUiIconBtn {
    /**
    * `true` if the active indicator should display
    */
    'active': boolean;
  }
  interface FitUiLabel {
    'base': boolean;
    'bold': boolean;
    'book': boolean;
    'capitalize': boolean;
    /**
    * The primary color of the label. Uses the branded CSS variables that are globally available to the application.
    */
    'color': Color;
    'lg': boolean;
    'lowercase': boolean;
    /**
    * The maximum lines to display before truncating the text. Default behavior shows all lines of text with no truncation.
    */
    'maxLines': number;
    'medium': boolean;
    'semibold': boolean;
    'sm': boolean;
    'type': 'label' | 'text';
    'uppercase': boolean;
    'xbold': boolean;
    'xl': boolean;
    'xs': boolean;
    'xxl': boolean;
  }
  interface FitUiLogo {}
  interface FitUiMap {}
  interface FitUiMapHud {}
  interface FitUiNavBar {}
  interface FitUiNavItem {
    /**
    * `true` if the nav item is active
    */
    'active': boolean;
  }
  interface FitUiSection {}
  interface FitUiSectionHeader {}
  interface FitUiStatCard {
    /**
    * The color of the statistic fill.
    */
    'color': Color;
    /**
    * The displayed heading of the statistic
    */
    'heading': string;
    /**
    * The color of the heading.
    */
    'headingColor': Color;
    /**
    * The name of the icon to display.
    */
    'icon': string;
    /**
    * The percentage to fill the statistic.
    */
    'percent': number | string;
    /**
    * The unit of measurement. Used as a display label.
    */
    'unit': string;
    /**
    * The value of the statistic being displayed.
    */
    'value': number | string;
  }
  interface FitUiTrainerCard {
    /**
    * `true` if the trainer is active (online)
    */
    'active': boolean;
    /**
    * The category of fitness the trainer focuses on.
    */
    'category': string;
    /**
    * The facebook url of the trainer
    */
    'facebookUrl': string;
    /**
    * The name of the trainer.
    */
    'name': string;
    /**
    * The rating of the trainer.
    */
    'rating': number;
    /**
    * The image source of the trainer's photo.
    */
    'src': string;
    /**
    * The twitter handle of the trainer
    */
    'twitterHandle': string;
  }
  interface FitUiTrainerCardList {
    'trainers': any[];
  }
  interface HiveUiHeading {
    'base': boolean;
    'bold': boolean;
    /**
    * The primary color of the label. Uses the branded CSS variables that are globally available to the application.
    */
    'color': Color;
    'large': boolean;
    /**
    * The maximum lines to display before truncating the text. Default behavior shows all lines of text with no truncation.
    */
    'maxLines': number;
    'medium': boolean;
    'small': boolean;
    'xbold': boolean;
    'xlarge': boolean;
    'xsmall': boolean;
    'xxlarge': boolean;
  }
}

declare global {


  interface HTMLFitUiAvatarElement extends Components.FitUiAvatar, HTMLStencilElement {}
  const HTMLFitUiAvatarElement: {
    prototype: HTMLFitUiAvatarElement;
    new (): HTMLFitUiAvatarElement;
  };

  interface HTMLFitUiCalendarCardElement extends Components.FitUiCalendarCard, HTMLStencilElement {}
  const HTMLFitUiCalendarCardElement: {
    prototype: HTMLFitUiCalendarCardElement;
    new (): HTMLFitUiCalendarCardElement;
  };

  interface HTMLFitUiCalendarCardListElement extends Components.FitUiCalendarCardList, HTMLStencilElement {}
  const HTMLFitUiCalendarCardListElement: {
    prototype: HTMLFitUiCalendarCardListElement;
    new (): HTMLFitUiCalendarCardListElement;
  };

  interface HTMLFitUiDashboardActivityChartElement extends Components.FitUiDashboardActivityChart, HTMLStencilElement {}
  const HTMLFitUiDashboardActivityChartElement: {
    prototype: HTMLFitUiDashboardActivityChartElement;
    new (): HTMLFitUiDashboardActivityChartElement;
  };

  interface HTMLFitUiDashboardDrawerElement extends Components.FitUiDashboardDrawer, HTMLStencilElement {}
  const HTMLFitUiDashboardDrawerElement: {
    prototype: HTMLFitUiDashboardDrawerElement;
    new (): HTMLFitUiDashboardDrawerElement;
  };

  interface HTMLFitUiDashboardPageElement extends Components.FitUiDashboardPage, HTMLStencilElement {}
  const HTMLFitUiDashboardPageElement: {
    prototype: HTMLFitUiDashboardPageElement;
    new (): HTMLFitUiDashboardPageElement;
  };

  interface HTMLFitUiDateBtnElement extends Components.FitUiDateBtn, HTMLStencilElement {}
  const HTMLFitUiDateBtnElement: {
    prototype: HTMLFitUiDateBtnElement;
    new (): HTMLFitUiDateBtnElement;
  };

  interface HTMLFitUiGoalCtaElement extends Components.FitUiGoalCta, HTMLStencilElement {}
  const HTMLFitUiGoalCtaElement: {
    prototype: HTMLFitUiGoalCtaElement;
    new (): HTMLFitUiGoalCtaElement;
  };

  interface HTMLFitUiIconElement extends Components.FitUiIcon, HTMLStencilElement {}
  const HTMLFitUiIconElement: {
    prototype: HTMLFitUiIconElement;
    new (): HTMLFitUiIconElement;
  };

  interface HTMLFitUiIconBtnElement extends Components.FitUiIconBtn, HTMLStencilElement {}
  const HTMLFitUiIconBtnElement: {
    prototype: HTMLFitUiIconBtnElement;
    new (): HTMLFitUiIconBtnElement;
  };

  interface HTMLFitUiLabelElement extends Components.FitUiLabel, HTMLStencilElement {}
  const HTMLFitUiLabelElement: {
    prototype: HTMLFitUiLabelElement;
    new (): HTMLFitUiLabelElement;
  };

  interface HTMLFitUiLogoElement extends Components.FitUiLogo, HTMLStencilElement {}
  const HTMLFitUiLogoElement: {
    prototype: HTMLFitUiLogoElement;
    new (): HTMLFitUiLogoElement;
  };

  interface HTMLFitUiMapElement extends Components.FitUiMap, HTMLStencilElement {}
  const HTMLFitUiMapElement: {
    prototype: HTMLFitUiMapElement;
    new (): HTMLFitUiMapElement;
  };

  interface HTMLFitUiMapHudElement extends Components.FitUiMapHud, HTMLStencilElement {}
  const HTMLFitUiMapHudElement: {
    prototype: HTMLFitUiMapHudElement;
    new (): HTMLFitUiMapHudElement;
  };

  interface HTMLFitUiNavBarElement extends Components.FitUiNavBar, HTMLStencilElement {}
  const HTMLFitUiNavBarElement: {
    prototype: HTMLFitUiNavBarElement;
    new (): HTMLFitUiNavBarElement;
  };

  interface HTMLFitUiNavItemElement extends Components.FitUiNavItem, HTMLStencilElement {}
  const HTMLFitUiNavItemElement: {
    prototype: HTMLFitUiNavItemElement;
    new (): HTMLFitUiNavItemElement;
  };

  interface HTMLFitUiSectionElement extends Components.FitUiSection, HTMLStencilElement {}
  const HTMLFitUiSectionElement: {
    prototype: HTMLFitUiSectionElement;
    new (): HTMLFitUiSectionElement;
  };

  interface HTMLFitUiSectionHeaderElement extends Components.FitUiSectionHeader, HTMLStencilElement {}
  const HTMLFitUiSectionHeaderElement: {
    prototype: HTMLFitUiSectionHeaderElement;
    new (): HTMLFitUiSectionHeaderElement;
  };

  interface HTMLFitUiStatCardElement extends Components.FitUiStatCard, HTMLStencilElement {}
  const HTMLFitUiStatCardElement: {
    prototype: HTMLFitUiStatCardElement;
    new (): HTMLFitUiStatCardElement;
  };

  interface HTMLFitUiTrainerCardElement extends Components.FitUiTrainerCard, HTMLStencilElement {}
  const HTMLFitUiTrainerCardElement: {
    prototype: HTMLFitUiTrainerCardElement;
    new (): HTMLFitUiTrainerCardElement;
  };

  interface HTMLFitUiTrainerCardListElement extends Components.FitUiTrainerCardList, HTMLStencilElement {}
  const HTMLFitUiTrainerCardListElement: {
    prototype: HTMLFitUiTrainerCardListElement;
    new (): HTMLFitUiTrainerCardListElement;
  };

  interface HTMLHiveUiHeadingElement extends Components.HiveUiHeading, HTMLStencilElement {}
  const HTMLHiveUiHeadingElement: {
    prototype: HTMLHiveUiHeadingElement;
    new (): HTMLHiveUiHeadingElement;
  };
  interface HTMLElementTagNameMap {
    'fit-ui-avatar': HTMLFitUiAvatarElement;
    'fit-ui-calendar-card': HTMLFitUiCalendarCardElement;
    'fit-ui-calendar-card-list': HTMLFitUiCalendarCardListElement;
    'fit-ui-dashboard-activity-chart': HTMLFitUiDashboardActivityChartElement;
    'fit-ui-dashboard-drawer': HTMLFitUiDashboardDrawerElement;
    'fit-ui-dashboard-page': HTMLFitUiDashboardPageElement;
    'fit-ui-date-btn': HTMLFitUiDateBtnElement;
    'fit-ui-goal-cta': HTMLFitUiGoalCtaElement;
    'fit-ui-icon': HTMLFitUiIconElement;
    'fit-ui-icon-btn': HTMLFitUiIconBtnElement;
    'fit-ui-label': HTMLFitUiLabelElement;
    'fit-ui-logo': HTMLFitUiLogoElement;
    'fit-ui-map': HTMLFitUiMapElement;
    'fit-ui-map-hud': HTMLFitUiMapHudElement;
    'fit-ui-nav-bar': HTMLFitUiNavBarElement;
    'fit-ui-nav-item': HTMLFitUiNavItemElement;
    'fit-ui-section': HTMLFitUiSectionElement;
    'fit-ui-section-header': HTMLFitUiSectionHeaderElement;
    'fit-ui-stat-card': HTMLFitUiStatCardElement;
    'fit-ui-trainer-card': HTMLFitUiTrainerCardElement;
    'fit-ui-trainer-card-list': HTMLFitUiTrainerCardListElement;
    'hive-ui-heading': HTMLHiveUiHeadingElement;
  }
}

declare namespace LocalJSX {
  interface FitUiAvatar {
    /**
    * The source of the image to render.
    */
    'src'?: string;
  }
  interface FitUiCalendarCard {
    /**
    * The color of the indicator on the card
    */
    'color'?: Color;
    /**
    * The display format for the end time.
    */
    'endTime'?: string;
    /**
    * The heading of the calendar card
    */
    'heading'?: string;
    'onMore'?: (event: CustomEvent<any>) => void;
    /**
    * The display format for the start time.
    */
    'startTime'?: string;
    /**
    * The sub heading of the calendar card
    */
    'subheading'?: string;
  }
  interface FitUiCalendarCardList {
    'items'?: any[];
  }
  interface FitUiDashboardActivityChart {}
  interface FitUiDashboardDrawer {}
  interface FitUiDashboardPage {}
  interface FitUiDateBtn {
    'value'?: Date;
  }
  interface FitUiGoalCta {}
  interface FitUiIcon {
    /**
    * Specifies the label to use for accessibility. Defaults to the icon name.
    */
    'ariaLabel'?: string;
    'color'?: Color;
    /**
    * If enabled, ion-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
    */
    'lazy'?: boolean;
    /**
    * Specifies which icon to use from the built-in set of icons.
    */
    'name'?: string;
    /**
    * The size of the icon. Available options are: `"small"` and `"large"`.
    */
    'size'?: string;
  }
  interface FitUiIconBtn {
    /**
    * `true` if the active indicator should display
    */
    'active'?: boolean;
  }
  interface FitUiLabel {
    'base'?: boolean;
    'bold'?: boolean;
    'book'?: boolean;
    'capitalize'?: boolean;
    /**
    * The primary color of the label. Uses the branded CSS variables that are globally available to the application.
    */
    'color'?: Color;
    'lg'?: boolean;
    'lowercase'?: boolean;
    /**
    * The maximum lines to display before truncating the text. Default behavior shows all lines of text with no truncation.
    */
    'maxLines'?: number;
    'medium'?: boolean;
    'semibold'?: boolean;
    'sm'?: boolean;
    'type'?: 'label' | 'text';
    'uppercase'?: boolean;
    'xbold'?: boolean;
    'xl'?: boolean;
    'xs'?: boolean;
    'xxl'?: boolean;
  }
  interface FitUiLogo {}
  interface FitUiMap {}
  interface FitUiMapHud {}
  interface FitUiNavBar {}
  interface FitUiNavItem {
    /**
    * `true` if the nav item is active
    */
    'active'?: boolean;
  }
  interface FitUiSection {}
  interface FitUiSectionHeader {}
  interface FitUiStatCard {
    /**
    * The color of the statistic fill.
    */
    'color'?: Color;
    /**
    * The displayed heading of the statistic
    */
    'heading'?: string;
    /**
    * The color of the heading.
    */
    'headingColor'?: Color;
    /**
    * The name of the icon to display.
    */
    'icon'?: string;
    /**
    * The percentage to fill the statistic.
    */
    'percent'?: number | string;
    /**
    * The unit of measurement. Used as a display label.
    */
    'unit'?: string;
    /**
    * The value of the statistic being displayed.
    */
    'value'?: number | string;
  }
  interface FitUiTrainerCard {
    /**
    * `true` if the trainer is active (online)
    */
    'active'?: boolean;
    /**
    * The category of fitness the trainer focuses on.
    */
    'category'?: string;
    /**
    * The facebook url of the trainer
    */
    'facebookUrl'?: string;
    /**
    * The name of the trainer.
    */
    'name'?: string;
    /**
    * The rating of the trainer.
    */
    'rating'?: number;
    /**
    * The image source of the trainer's photo.
    */
    'src'?: string;
    /**
    * The twitter handle of the trainer
    */
    'twitterHandle'?: string;
  }
  interface FitUiTrainerCardList {
    'trainers'?: any[];
  }
  interface HiveUiHeading {
    'base'?: boolean;
    'bold'?: boolean;
    /**
    * The primary color of the label. Uses the branded CSS variables that are globally available to the application.
    */
    'color'?: Color;
    'large'?: boolean;
    /**
    * The maximum lines to display before truncating the text. Default behavior shows all lines of text with no truncation.
    */
    'maxLines'?: number;
    'medium'?: boolean;
    'small'?: boolean;
    'xbold'?: boolean;
    'xlarge'?: boolean;
    'xsmall'?: boolean;
    'xxlarge'?: boolean;
  }

  interface IntrinsicElements {
    'fit-ui-avatar': FitUiAvatar;
    'fit-ui-calendar-card': FitUiCalendarCard;
    'fit-ui-calendar-card-list': FitUiCalendarCardList;
    'fit-ui-dashboard-activity-chart': FitUiDashboardActivityChart;
    'fit-ui-dashboard-drawer': FitUiDashboardDrawer;
    'fit-ui-dashboard-page': FitUiDashboardPage;
    'fit-ui-date-btn': FitUiDateBtn;
    'fit-ui-goal-cta': FitUiGoalCta;
    'fit-ui-icon': FitUiIcon;
    'fit-ui-icon-btn': FitUiIconBtn;
    'fit-ui-label': FitUiLabel;
    'fit-ui-logo': FitUiLogo;
    'fit-ui-map': FitUiMap;
    'fit-ui-map-hud': FitUiMapHud;
    'fit-ui-nav-bar': FitUiNavBar;
    'fit-ui-nav-item': FitUiNavItem;
    'fit-ui-section': FitUiSection;
    'fit-ui-section-header': FitUiSectionHeader;
    'fit-ui-stat-card': FitUiStatCard;
    'fit-ui-trainer-card': FitUiTrainerCard;
    'fit-ui-trainer-card-list': FitUiTrainerCardList;
    'hive-ui-heading': HiveUiHeading;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'fit-ui-avatar': LocalJSX.FitUiAvatar & JSXBase.HTMLAttributes<HTMLFitUiAvatarElement>;
      'fit-ui-calendar-card': LocalJSX.FitUiCalendarCard & JSXBase.HTMLAttributes<HTMLFitUiCalendarCardElement>;
      'fit-ui-calendar-card-list': LocalJSX.FitUiCalendarCardList & JSXBase.HTMLAttributes<HTMLFitUiCalendarCardListElement>;
      'fit-ui-dashboard-activity-chart': LocalJSX.FitUiDashboardActivityChart & JSXBase.HTMLAttributes<HTMLFitUiDashboardActivityChartElement>;
      'fit-ui-dashboard-drawer': LocalJSX.FitUiDashboardDrawer & JSXBase.HTMLAttributes<HTMLFitUiDashboardDrawerElement>;
      'fit-ui-dashboard-page': LocalJSX.FitUiDashboardPage & JSXBase.HTMLAttributes<HTMLFitUiDashboardPageElement>;
      'fit-ui-date-btn': LocalJSX.FitUiDateBtn & JSXBase.HTMLAttributes<HTMLFitUiDateBtnElement>;
      'fit-ui-goal-cta': LocalJSX.FitUiGoalCta & JSXBase.HTMLAttributes<HTMLFitUiGoalCtaElement>;
      'fit-ui-icon': LocalJSX.FitUiIcon & JSXBase.HTMLAttributes<HTMLFitUiIconElement>;
      'fit-ui-icon-btn': LocalJSX.FitUiIconBtn & JSXBase.HTMLAttributes<HTMLFitUiIconBtnElement>;
      'fit-ui-label': LocalJSX.FitUiLabel & JSXBase.HTMLAttributes<HTMLFitUiLabelElement>;
      'fit-ui-logo': LocalJSX.FitUiLogo & JSXBase.HTMLAttributes<HTMLFitUiLogoElement>;
      'fit-ui-map': LocalJSX.FitUiMap & JSXBase.HTMLAttributes<HTMLFitUiMapElement>;
      'fit-ui-map-hud': LocalJSX.FitUiMapHud & JSXBase.HTMLAttributes<HTMLFitUiMapHudElement>;
      'fit-ui-nav-bar': LocalJSX.FitUiNavBar & JSXBase.HTMLAttributes<HTMLFitUiNavBarElement>;
      'fit-ui-nav-item': LocalJSX.FitUiNavItem & JSXBase.HTMLAttributes<HTMLFitUiNavItemElement>;
      'fit-ui-section': LocalJSX.FitUiSection & JSXBase.HTMLAttributes<HTMLFitUiSectionElement>;
      'fit-ui-section-header': LocalJSX.FitUiSectionHeader & JSXBase.HTMLAttributes<HTMLFitUiSectionHeaderElement>;
      'fit-ui-stat-card': LocalJSX.FitUiStatCard & JSXBase.HTMLAttributes<HTMLFitUiStatCardElement>;
      'fit-ui-trainer-card': LocalJSX.FitUiTrainerCard & JSXBase.HTMLAttributes<HTMLFitUiTrainerCardElement>;
      'fit-ui-trainer-card-list': LocalJSX.FitUiTrainerCardList & JSXBase.HTMLAttributes<HTMLFitUiTrainerCardListElement>;
      'hive-ui-heading': LocalJSX.HiveUiHeading & JSXBase.HTMLAttributes<HTMLHiveUiHeadingElement>;
    }
  }
}


